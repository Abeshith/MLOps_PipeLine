[project]
name = "mlops-pipeline"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "dagshub>=0.6.3",
    "evidently>=0.7.14",
    "kaggle>=1.7.4.5",
    "pytest>=8.4.2",
]

[dependency-groups]
dev = [
    "apache-airflow>=3.0.6",
    "dvc>=3.63.0",
    "elasticsearch>=9.1.0",
    "flask>=3.1.2",
    "jaeger-client>=4.8.0",
    "joblib>=1.5.2",
    "mlflow>=3.3.2",
    "numpy>=2.3.2",
    "opentracing>=2.4.0",
    "pandas>=2.3.2",
    "prometheus-client>=0.22.1",
    "pyyaml>=6.0.2",
    "requests>=2.32.5",
    "scikit-learn>=1.7.1",
    "xgboost>=3.0.5",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | observability
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mlpipeline"]
known_third_party = ["pandas", "numpy", "sklearn", "xgboost", "flask", "prometheus_client"]
skip = ["observability"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true
exclude = [
    "observability/",
    "build/",
    "dist/",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/observability/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
