name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  PYTHONPATH: "src"

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    name: Code Quality & Formatting
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Run Black (Code Formatting)
      run: black --check --diff .
      
    - name: Run isort (Import Sorting)
      run: isort --check-only --diff .
      
    - name: Run Flake8 (Linting)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: Run MyPy (Type Checking)
      run: mypy src/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true
      
    - name: Run Bandit (Security Check)
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Run Safety (Dependency Security)
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test:
    runs-on: ubuntu-latest
    name: Run Tests
    needs: lint-and-format
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Create test data directories
      run: |
        mkdir -p artifacts/data_ingestion/test_data
        mkdir -p artifacts/data_ingestion/train_data
        mkdir -p logs
        
    - name: Run unit tests
      run: |
        export PYTHONPATH=src
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
      continue-on-error: false
      
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: pytest-results.xml

  data-validation:
    runs-on: ubuntu-latest
    name: Data Validation
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Create sample test data
      run: |
        mkdir -p artifacts/data_ingestion/test_data
        mkdir -p artifacts/data_ingestion/train_data
        python -c "
        import pandas as pd
        import numpy as np
        np.random.seed(42)
        data = {
            'age': np.random.randint(18, 80, 100),
            'job': np.random.choice(['admin', 'technician', 'management'], 100),
            'marital': np.random.choice(['married', 'single', 'divorced'], 100),
            'education': np.random.choice(['primary', 'secondary', 'tertiary'], 100),
            'default': np.random.choice(['no', 'yes'], 100),
            'balance': np.random.randint(0, 10000, 100),
            'housing': np.random.choice(['no', 'yes'], 100),
            'loan': np.random.choice(['no', 'yes'], 100),
            'contact': np.random.choice(['cellular', 'telephone'], 100),
            'duration': np.random.randint(0, 1000, 100),
            'campaign': np.random.randint(1, 10, 100),
            'pdays': np.random.randint(-1, 999, 100),
            'previous': np.random.randint(0, 10, 100),
            'poutcome': np.random.choice(['success', 'failure', 'other'], 100),
            'y': np.random.choice(['no', 'yes'], 100)
        }
        sample_data = pd.DataFrame(data)
        sample_data.to_csv('artifacts/data_ingestion/test_data/test.csv', index=False)
        sample_data.to_csv('artifacts/data_ingestion/train_data/train.csv', index=False)
        "
        
    - name: Run data validation
      run: |
        export PYTHONPATH=src
        python -c "
        from src.mlpipeline.config.configuration import ConfigurationManager
        from src.mlpipeline.components.data_validation import DataValidation
        import os
        
        try:
            config = ConfigurationManager()
            data_validation_config = config.get_data_validation_config()
            data_validation = DataValidation(config=data_validation_config)
            
            if os.path.exists(data_validation_config.train_file_path) and os.path.exists(data_validation_config.test_file_path):
                data_validation.validate_all_columns()
                print('Data validation completed successfully')
            else:
                print('No data files found for validation')
        except Exception as e:
            print(f'Data validation failed: {e}')
            exit(1)
        "
        
    - name: Upload validation reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: data-validation-reports
        path: |
          artifacts/data_validation/
